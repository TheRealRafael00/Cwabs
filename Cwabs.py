import base64
exec(base64.b64decode("import os
import re
import sys
import time
import socket
import requests
from datetime import datetime
from ipwhois import IPWhois
import pytz
import signal
from pathlib import Path

# Warna terminal
RESET = "\033[0m"
CYAN = "\033[96m"
YELLOW = "\033[93m"
GREEN = "\033[92m"
RED = "\033[91m"
BOLD = "\033[1m"
BLUE = "\033[94m"

# Anti Ctrl+C
def handle_sigint(sig, frame):
    print(f"\n{RED}[!] Ctrl+C is disabled. Use the menu to exit properly.{RESET}")
signal.signal(signal.SIGINT, handle_sigint)

# Lokasi penyimpanan API key
API_KEY_FILE = Path.home() / ".vt_api_key"

# Fungsi clear
def clear():
    os.system("clear")
    os.system("neofetch")

# Validasi URL
def is_valid_url(url):
    pattern = r'^https?://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    return re.match(pattern, url)

# Ambil informasi website
def get_info(url):
    try:
        domain = re.sub(r'^https?://', '', url).split('/')[0]
        ip = socket.gethostbyname(domain)
        try:
            hostname = socket.gethostbyaddr(ip)[0]
        except:
            hostname = "N/A"
        response = requests.get(f"https://ipinfo.io/{ip}/json").json()
        try:
            whois = IPWhois(ip).lookup_rdap()
            org_name = whois.get('network', {}).get('name', 'N/A')
        except:
            org_name = "N/A"

        info = {
            "URL": url,
            "IP Address": ip,
            "Host Name": hostname,
            "ISP": response.get('org', 'N/A'),
            "Organization": org_name,
            "Country": response.get('country', 'N/A'),
            "Region": response.get('region', 'N/A'),
            "City": response.get('city', 'N/A'),
            "Timezone": response.get('timezone', 'N/A'),
            "Local Time": datetime.now(pytz.timezone(response.get('timezone', 'UTC'))).strftime('%Y-%m-%d %H:%M:%S'),
            "Postal Code": response.get('postal', 'N/A'),
            "Coordinates": response.get('loc', 'N/A')
        }

        print(f"\n{GREEN}{BOLD}Website Information:{RESET}")
        for key, val in info.items():
            print(f"{CYAN}{key:<15}:{RESET} {YELLOW}{val}{RESET}")
        print()

    except Exception as e:
        print(f"{RED}Error: {e}{RESET}")

# Validasi API key
def validate_vt_api(key):
    headers = {"x-apikey": key}
    try:
        r = requests.get("https://www.virustotal.com/api/v3/users/me", headers=headers)
        return r.status_code == 200
    except:
        return False

# Prompt API key baru
def prompt_for_new_api():
    print(f"{CYAN}Visit https://www.virustotal.com and log in to get your API key.{RESET}")
    key = input(f"{YELLOW}Enter your VirusTotal API key: {RESET}")
    if validate_vt_api(key):
        API_KEY_FILE.write_text(key.strip())
        print(f"{GREEN}[+] API key saved successfully.{RESET}")
        return key.strip()
    else:
        print(f"{RED}[!] Invalid API key.{RESET}")
        return None

# Ambil dan validasi API key
def get_vt_api_key():
    if API_KEY_FILE.exists():
        key = API_KEY_FILE.read_text().strip()
        if validate_vt_api(key):
            return key
        else:
            print(f"{RED}[!] Stored API key is invalid.{RESET}")
            choice = input(f"{YELLOW}Do you want to enter a new API key? (y/n): {RESET}")
            if choice.lower() == 'y':
                API_KEY_FILE.unlink(missing_ok=True)
                return prompt_for_new_api()
            else:
                return None
    else:
        return prompt_for_new_api()

# Scan URL dengan VirusTotal
def scan_url_with_virustotal(url, key):
    headers = {"x-apikey": key}
    try:
        response = requests.post("https://www.virustotal.com/api/v3/urls",
                                 headers=headers,
                                 data={"url": url})
        if response.status_code != 200:
            print(f"{RED}Failed to submit URL to VirusTotal.{RESET}")
            return

        analysis_id = response.json()['data']['id']
        time.sleep(2)
        analysis_url = f"https://www.virustotal.com/api/v3/analyses/{analysis_id}"
        result = requests.get(analysis_url, headers=headers).json()

        stats = result["data"]["attributes"]["stats"]
        print(f"\n{GREEN}Scan Results:{RESET}")
        for key in stats:
            print(f"{CYAN}{key.capitalize():<15}:{RESET} {YELLOW}{stats[key]}{RESET}")

    except Exception as e:
        print(f"{RED}Error scanning URL: {e}{RESET}")

# Cek status situs
def check_site_status(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"{GREEN}The site is ONLINE!{RESET}")
        else:
            print(f"{RED}The site returned a {response.status_code} error code.{RESET}")
    except requests.exceptions.RequestException as e:
        print(f"{RED}The site is OFFLINE. Error: {e}{RESET}")

# Menu pilihan 2 dengan fitur 'change-api'
def option_2():
    clear()
    while True:
        url = input(f"{GREEN}Enter URL to scan (or type 'change-api' to update API): {RESET}")
        if url.lower() == "change-api":
            clear()
            print(f"{YELLOW}[!] Old API key removed. Please enter a new API key.{RESET}")
            API_KEY_FILE.unlink(missing_ok=True)
            key = prompt_for_new_api()
            if key:
                print(f"{GREEN}[+] New API key saved and ready to use!{RESET}")
            else:
                print(f"{RED}[!] Failed to save new API key. Returning to menu...{RESET}")
            time.sleep(2)
            return
        elif not is_valid_url(url):
            print(f"{RED}Invalid URL format. Try again.{RESET}")
            time.sleep(2)
        else:
            key = get_vt_api_key()
            if key:
                scan_url_with_virustotal(url, key)
            input(f"{BLUE}Press Enter to return to menu...{RESET}")
            return

# Greeting sesuai waktu
def greeting():
    hour = datetime.now().hour
    if 5 <= hour < 12:
        return "Good Morning"
    elif 12 <= hour < 16:
        return "Good Afternoon"
    elif 16 <= hour < 20:
        return "Good Evening"
    else:
        return "Good Night"

# Pastikan zphisher tersedia
def ensure_zphisher():
    if not os.path.isdir("zphisher"):
        print(f"{YELLOW}[!] File 'phising' not found. cloning the repository...{RESET}")
        try:
            os.system("git clone https://github.com/htr-tech/zphisher.git")
            print(f"{GREEN}[+] clone succesfully.{RESET}")
        except Exception as e:
            print(f"{RED}[!] clone not succesfully: {e}{RESET}")
    else:
        print(f"{GREEN}[✓] File 'phising' found.{RESET}")

# Menu utama
def main():
    while True:
        clear()
        print(f"{BLUE}{BOLD}╭──────────────────────────────────────────────────────────────╮{RESET}")
        print(f"{BLUE}│{RESET} {YELLOW}{greeting()} - Script by Mumyz (Rafael){RESET:<26}{BLUE}│{RESET}")
        print(f"{BLUE}╰──────────────────────────────────────────────────────────────╯{RESET}")
        print(f"{BLUE}│{RESET} {YELLOW}0{RESET}. Exit and Clear                                            {BLUE}│{RESET}")
        print(f"{BLUE}│{RESET} {YELLOW}1{RESET}. Website Information Lookup                                {BLUE}│{RESET}")
        print(f"{BLUE}│{RESET} {YELLOW}2{RESET}. Virus URL Scan                                            {BLUE}│{RESET}")
        print(f"{BLUE}│{RESET} {YELLOW}3{RESET}. Check if website is online                                {BLUE}│{RESET}")
        print(f"{BLUE}│{RESET} {YELLOW}4{RESET}. Run phishing                                              {BLUE}│{RESET}")
        print(f"{BLUE}│{RESET} {YELLOW}5{RESET}. Check system with URL                                     {BLUE}│{RESET}")
        print(f"{BLUE}╰──────────────────────────────────────────────────────────────╯{RESET}")
        choice = input(f"{GREEN}Select an option: {RESET}")

        if choice == "0":
            clear()
            print(f"{CYAN}Goodbye!{RESET}")
            sys.exit()
        elif choice == "1":
            clear()
            url = input(f"{GREEN}Enter website URL (e.g., https://example.com): {RESET}")
            if not is_valid_url(url):
                print(f"{RED}Invalid URL format. Try again.{RESET}")
                time.sleep(2)
            else:
                get_info(url)
                input(f"{BLUE}Press Enter to return to menu...{RESET}")
        elif choice == "2":
            option_2()
        elif choice == "3":
            clear()
            url = input(f"{GREEN}Enter website URL to check status: {RESET}")
            if not is_valid_url(url):
                print(f"{RED}Invalid URL format.{RESET}")
                time.sleep(2)
            else:
                check_site_status(url)
                time.sleep(2)
                input(f"{BLUE}Press Enter to return to menu...{RESET}")
        elif choice == "4":
            clear()
            print(f"{CYAN}Running phishing...{RESET}")
            try:
                if os.path.isdir("zphisher"):
                    os.system("cd zphisher && bash zphisher.sh")
                else:
                    print(f"{RED}File phishing not found.{RESET}")
            except Exception as e:
                print(f"{RED}Error in phishing: {e}{RESET}")
            input(f"{BLUE}Zphisher done, press enter to return to menu...{RESET}")
        elif choice == "5":
            clear()
            print(f"{CYAN}Running system...{RESET}")
            try:
                if os.path.isfile("Cwabs-clash.py"):
                    os.system("python Cwabs-clash.py")
                else:
                    print(f"{RED}File 'Cwabs-clash.py' not found. Please make sure it exists in this directory.{RESET}")
            except Exception as e:
                print(f"{RED}Error running the system: {e}{RESET}")
            input(f"{BLUE}Done. Press Enter to return to the menu...{RESET}")

if __name__ == "__main__":
    ensure_zphisher()
    main()
").decode("utf-8"))
