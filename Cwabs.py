import base64
exec(base64.b64decode(b'''import select
import base64
import shutil
import os
import random
import datetime
import pytz
import sys
import requests
import json
import socket
import time
import signal
import re
from termcolor import colored
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
from rich import box
from urllib.parse import urlparse

console = Console()
username = "gw-ganteng"
language = "en"  # Default language
api_key_path = ".vt_api_key"
rainbow_colors = ['red', 'yellow', 'green', 'cyan', 'blue', 'magenta']

def clear_screen():
    os.system("clear")


def get_greeting():
    global language
    global language
    tz = datetime.datetime.now().astimezone().tzinfo
    hour = datetime.datetime.now(tz).hour
    now = datetime.datetime.now(tz).strftime('%H:%M:%S')
    if language == "id":
        if 5 <= hour < 12:
            greeting = "Selamat pagi"
        elif 12 <= hour < 18:
            greeting = "Selamat siang"
        elif 18 <= hour < 22:
            greeting = "Selamat sore"
        else:
            greeting = "Selamat malam"
        return f"[red]•[/red] [yellow]{greeting}, sekarang pukul {now}[/yellow]"
    else:
        if 5 <= hour < 12:
            greeting = "Good morning"
        elif 12 <= hour < 18:
            greeting = "Good afternoon"
        elif 18 <= hour < 22:
            greeting = "Good evening"
        else:
            greeting = "Good night"
        return f"[red]•[/red] [yellow]{greeting}, now it's {now}[/yellow]"

    tz = datetime.datetime.now().astimezone().tzinfo
    hour = datetime.datetime.now(tz).hour
    now = datetime.datetime.now(tz).strftime('%H:%M:%S')
    if 5 <= hour < 12:
        greeting = "Good morning"
    elif 12 <= hour < 18:
        greeting = "Good afternoon"
    elif 18 <= hour < 22:
        greeting = "Good evening"
    else:
        greeting = "Good night"
    return f"[red]•[/red] [yellow]{greeting}, now it's {now}[/yellow]"

def rainbow_figlet(text="Cwabs"):
    if os.system("command -v figlet > /dev/null") != 0:
        console.print("[bold red]Error:[/bold red] figlet is not installed. Run: [green]pkg install figlet[/green]")
        return
    stream = os.popen(f"figlet {text}")
    figlet_text = stream.read()
    for line in figlet_text.splitlines():
        colored_line = ""
        for char in line:
            if char.strip() == "":
                colored_line += " "
            else:
                color = random.choice(rainbow_colors)
                colored_line += colored(char, color)
        print(colored_line)


def show_help():
    global language
    if language == "id":
        help_text = """
[bold color(lime_green)]0.[/bold color(lime_green)] exit           - Keluar dari program ini  
[bold color(lime_green)]1.[/bold color(lime_green)] help           - Tampilkan panel bantuan  
[bold color(lime_green)]2.[/bold color(lime_green)] settings       - Ubah pengaturan pengguna  
[bold color(lime_green)]3.[/bold color(lime_green)] web-checkVirus - Pindai URL menggunakan VirusTotal  
[bold color(lime_green)]4.[/bold color(lime_green)] web-lookup     - Lihat info website atau alamat IP  
[bold color(lime_green)]5.[/bold color(lime_green)] check-port     - Pindai port terbuka dari domain atau IP  
[bold color(lime_green)]6.[/bold color(lime_green)] encrypt-file   - Enkripsi file atau semua file di folder  
[bold color(lime_green)]7.[/bold color(lime_green)] check-my-info  - Tampilkan info sistem & perangkat
[bold color(lime_green)]8.[/bold color(lime_green)] decrypt-file   - meng-dekripsi file yang dienkripsi
"""
    else:
        help_text = """
[bold color(lime_green)]0.[/bold color(lime_green)] exit           - Exit this program  
[bold color(lime_green)]1.[/bold color(lime_green)] help           - Show this help panel  
[bold color(lime_green)]2.[/bold color(lime_green)] settings       - Change user settings  
[bold color(lime_green)]3.[/bold color(lime_green)] web-checkVirus - Scan a URL using VirusTotal  
[bold color(lime_green)]4.[/bold color(lime_green)] web-lookup     - View website or IP address information  
[bold color(lime_green)]5.[/bold color(lime_green)] check-port     - Scan open ports from domain or IP  
[bold color(lime_green)]6.[/bold color(lime_green)] encrypt-file   - Encrypt file or all files in a folder 
[bold color(lime_green)]7.[/bold color(lime_green)] check-my-info  - Display system & device info
[bold color(lime_green)]8.[/bold color(lime_green)] decrypt-file   - Decrypt encrypted files or scripts
"""
    console.print(Panel(help_text, title="[bold yellow]HELP PANEL[/bold yellow]", border_style="bright_cyan", box=box.ROUNDED))

def settings_menu():
    global username
    global language

    while True:
        console.print(Panel("[bold cyan]SETTINGS[/bold cyan]\n\n"
                            "[bold green]1.[/bold green] Change CMD Username\n"
                            "[bold blue]2.[/bold blue] Set VirusTotal API Key\n"
                            "[bold magenta]3.[/bold magenta] Trash-port (delete port scan result)\n"
                            "[bold yellow]4.[/bold yellow] Change Language (Bahasa)\n"
                            "[bold red]0.[/bold red] Back", 
                            title="Settings Menu", box=box.ROUNDED, border_style="blue"))
        
        choice = Prompt.ask("[bold blue]Enter your choice")

        if choice == "1":
            new_name = Prompt.ask("[bold yellow]Enter a new CMD username (max 20 characters)")
            if len(new_name) > 20:
                console.print("[bold red]Name too long! Max 20 characters allowed.")
            elif not new_name.strip():
                console.print("[bold red]Username cannot be empty!")
            else:
                username = new_name
                console.print(f"[bold green]Username updated to [yellow]{username}[/yellow]!")

        elif choice == "2":
            new_key = Prompt.ask("[bold cyan]Enter your VirusTotal API key")
            with open(api_key_path, "w") as f:
                f.write(new_key.strip())
            console.print("[bold green]API key saved successfully!")

        elif choice == "3":
            if os.path.exists("scan_results.txt"):
                try:
                    os.remove("scan_results.txt")
                    console.print("[bold green]'scan_results.txt' has been deleted successfully![/bold green]")
                except Exception as e:
                    console.print(f"[bold red]Error deleting file: {e}[/bold red]")
            else:
                console.print("[yellow]No scan result file found to delete.[/yellow]")

        elif choice == "4":
            lang_choice = Prompt.ask("[bold yellow]Select language[/bold yellow]", choices=["id", "en"])
            language = lang_choice
            console.print(f"[bold green]Language changed to: {language.upper()}[/bold green]")

        elif choice == "0":
            break
        else:
            console.print("[bold red]Invalid option. Please try again.")

def block_ctrl_c(signum, frame):
    console.print("\n[bold red]Ctrl+C disabled![/bold red]")

signal.signal(signal.SIGINT, block_ctrl_c)

def check_virus_in_url():
    if not os.path.exists(api_key_path):
        console.print("[bold red]No API key found! Please add it in settings.")
        return
    with open(api_key_path, "r") as f:
        api_key = f.read().strip()
    if not api_key:
        console.print("[bold red]API key is empty! Please update it in settings.")
        return

    url = Prompt.ask("[bold yellow]Enter URL to scan")
    console.print("[bold cyan]Scanning... please wait.")

    headers = { "x-apikey": api_key }

    try:
        response = requests.post("https://www.virustotal.com/api/v3/urls", headers=headers, data={"url": url})
        if response.status_code != 200:
            console.print("[bold red]Failed to submit URL. Check your API key or internet.")
            return

        analysis_id = response.json()["data"]["id"]
        result = requests.get(f"https://www.virustotal.com/api/v3/analyses/{analysis_id}", headers=headers)
        data = result.json()["data"]["attributes"]["stats"]

        malicious = data.get("malicious", 0)
        suspicious = data.get("suspicious", 0)
        harmless = data.get("harmless", 0)
        undetected = data.get("undetected", 0)

        console.print("\n[bold]VirusTotal Analysis Result:[/bold]")
        if malicious > 0 or suspicious > 0:
            console.print(f"[bold red]Malicious: {malicious} | Suspicious: {suspicious}[/bold red]")
        elif harmless > 0:
            console.print(f"[bold green]Harmless: {harmless}[/bold green]")
        else:
            console.print(f"[bold yellow]Undetected: {undetected}[/bold yellow]")

    except Exception as e:
        console.print(f"[bold red]Error: {e}[/bold red]")

def clear_and_header():
    clear_screen()
    console.print(get_greeting(), justify="left")
    print()
    rainbow_figlet("Cwabs")
    print()

def web_lookup():
    console.print(Panel("[bold cyan]Enter a valid domain or IP address to lookup:[/bold cyan]", title="web-lookup", border_style="cyan"))
    target = Prompt.ask("[bold yellow]Target (URL or IP)[/bold yellow]")

    try:
        import socket
        import platform
        import requests
        from urllib.parse import urlparse
        from datetime import datetime

        parsed = urlparse(target if "://" in target else f"http://{target}")
        host = parsed.hostname if parsed.hostname else target
        ip = socket.gethostbyname(host)

        res = requests.get(f"http://ip-api.com/json/{ip}?fields=status,message,continent,country,regionName,city,zip,lat,lon,timezone,isp,org,asname,query")
        data = res.json()

        if data["status"] != "success":
            console.print(f"[bold red]Error:[/bold red] {data['message']}")
            return

        hostname = socket.getfqdn(ip)
        os_name = platform.system()
        os_version = platform.version()
        kernel = platform.release()

        info_panel = f"""
    [bold green]IP Address     :[/bold green] {data['query']}
    [bold green]Host Name      :[/bold green] {hostname}
    [bold green]IP Range       :[/bold green] Unknown (Static from IP)
    [bold green]ISP            :[/bold green] {data['isp']}
    [bold green]Organization   :[/bold green] {data['org']}
    [bold green]Country        :[/bold green] {data['country']}
    [bold green]Region         :[/bold green] {data['regionName']}
    [bold green]City           :[/bold green] {data['city']}
    [bold green]Postal Code    :[/bold green] {data['zip']}
    [bold green]Timezone       :[/bold green] {data['timezone']}
    [bold green]Coordinates    :[/bold green] {data['lat']}, {data['lon']}
    [bold green]Local Time     :[/bold green] {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
    [bold green]OS             :[/bold green] {os_name}
    [bold green]Kernel Version :[/bold green] {kernel} ({os_version})
        """
        console.print(Panel(info_panel, title="[bold magenta]Web Lookup Result[/bold magenta]", border_style="purple"))

    except Exception as e:
        console.print(f"[bold red]Failed to lookup:[/bold red] {str(e)}")

def encrypt_file():
    console.print(Panel(
        "[bold cyan]Encrypt File or Folder[/bold cyan]\n\n"
        "[green]• Encrypt a single file or a full folder[/green]\n"
        "[yellow]• Encrypted files will be executable (if supported)[/yellow]",
        title="[bold magenta]Encryption Engine[/bold magenta]",
        border_style="bright_magenta", box=box.ROUNDED))

    mode = Prompt.ask("[bold cyan]Select mode", choices=["file", "folder"])

    language_wrappers = {
        "python": lambda code: f"import base64\nexec(base64.b64decode(b'''{code}'''))",
        "bash": lambda code: f"#!/bin/bash\necho '{code}' | base64 -d | bash",
        "php": lambda code: f"<?php eval(base64_decode('{code}')); ?>",
        "javascript": lambda code: f"eval(atob('{code}'))",  # Browser only
        "c": lambda code: f"#include<stdio.h>\n#include<stdlib.h>\nint main(){{system(\"echo '{code}' | base64 -d | gcc -x c -o temp_prog - && ./temp_prog\");return 0;}}",
        "c++": lambda code: f"#include<iostream>\n#include<cstdlib>\nint main(){{system(\"echo '{code}' | base64 -d | g++ -x c++ -o temp_prog - && ./temp_prog\");return 0;}}",
        "java": lambda code: f"// Use a custom Java class loader\n// Encrypted content: {code}",
        "go": lambda code: f"package main\nimport(\"os/exec\"; \"encoding/base64\"; \"fmt\")\nfunc main(){{data, _ := base64.StdEncoding.DecodeString(\"{code}\");cmd := exec.Command(\"sh\", \"-c\", string(data));_ = cmd.Run()}}",
        "ruby": lambda code: f"eval(Base64.decode64('{code}'))",
        "html": lambda code: f"<!-- base64 content -->\n<script>eval(atob('{code}'))</script>",
        "json": lambda code: code,
        "xml": lambda code: code,
        "sql": lambda code: f"-- base64 encoded SQL query\n-- echo '{code}' | base64 -d | sqlite3 mydb.db",
        "other": lambda code: code,
    }

    if mode == "file":
        folder_path = Prompt.ask("[bold yellow]Enter the folder path")
        filename = Prompt.ask("[bold yellow]Enter the file name (e.g., script.py)")
        full_path = os.path.join(folder_path.strip(), filename.strip())

        if not os.path.isfile(full_path):
            console.print(f"[bold red]Error:[/bold red] File not found: [white]{full_path}[/white]")
            return

        lang_options = list(language_wrappers.keys())
        selected_lang = Prompt.ask(
            "[bold cyan]What is the file type/language?",
            choices=lang_options,
            default="other"
        )

        try:
            with open(full_path, "rb") as f:
                data = f.read()

            encoded = base64.b64encode(data).decode("utf-8")
            wrapper = language_wrappers[selected_lang](encoded)

            name, ext = os.path.splitext(filename)
            output_filename = f"{name}_encrypted{ext}"
            output_path = os.path.join(folder_path, output_filename)

            with open(output_path, "w", encoding="utf-8") as f:
                f.write(wrapper)

            os.chmod(output_path, 0o755)

            console.print(Panel(
                f"[green]Encryption successful![/green]\n\n"
                f"[cyan]Language:[/cyan] {selected_lang.upper()}\n"
                f"[cyan]Encrypted as:[/cyan] {output_filename}",
                title="[bold green]Done[/bold green]", border_style="green", box=box.ROUNDED
            ))

        except Exception as e:
            console.print(f"[bold red]Encryption failed: {e}[/bold red]")

    elif mode == "folder":
        console.print("[bold red]Folder mode belum mendukung wrapper otomatis. Gunakan mode file dulu untuk bahasa tertentu.[/bold red]")

def check_my_info():
    import platform
    from datetime import datetime, timedelta

    console.print(Panel("[bold cyan]Gathering device information...[/bold cyan]", title="[bold magenta]check-my-info[/bold magenta]", border_style="cyan"))

    try:
        ip = requests.get("https://api.ipify.org").text
        geo = requests.get("http://ip-api.com/json").json()
        timezone = time.tzname[0]

        # Estimasi waktu install Termux
        install_timestamp = os.path.getctime("/data/data/com.termux/files/home")
        install_date = datetime.fromtimestamp(install_timestamp).strftime('%Y-%m-%d %H:%M:%S')

        # Ambil RAM (dari 'free -m')
        ram_output = os.popen("free -m").read()
        total_ram = "Unknown"
        for line in ram_output.splitlines():
            if "Mem:" in line:
                total_ram = line.split()[1] + " MB"

        # CPU info dari 'cat /proc/cpuinfo'
        cpuinfo = os.popen("cat /proc/cpuinfo | grep 'model name' | uniq").read().strip().split(":")[-1].strip()

        info = f"""
[bold green]Username        :[/bold green] {username}
[bold green]Public IP       :[/bold green] {ip}
[bold green]Operating System:[/bold green] {platform.system()} {platform.release()}
[bold green]Kernel Version  :[/bold green] {platform.version()}
[bold green]Hostname        :[/bold green] {platform.node()}
[bold green]CPU             :[/bold green] {cpuinfo}
[bold green]Memory (RAM)    :[/bold green] {total_ram}
[bold green]Timezone        :[/bold green] {timezone}
[bold green]Carrier         :[/bold green] {geo.get('org', 'Unknown')}
[bold green]ISP             :[/bold green] {geo.get('isp', 'Unknown')}
[bold green]City            :[/bold green] {geo.get('city', 'Unknown')}
[bold green]Region          :[/bold green] {geo.get('regionName', 'Unknown')}
[bold green]Installed Since :[/bold green] {install_date}
        """
        console.print(Panel(info, title="[bold yellow]System Overview[/bold yellow]", border_style="bright_magenta", box=box.DOUBLE))

    except Exception as e:
        console.print(f"[bold red]Error while fetching information: {e}[/bold red]")

def show_prompt():
    while True:
        user_input = Prompt.ask(f"[bold red]╭───≼[yellow]{username}[/yellow]•~≽\n╰──╼✠")
        if user_input == "1" or user_input.lower() == "help":
            clear_and_header()
            show_help()
        elif user_input == "2" or user_input.lower() == "settings":
            clear_and_header()
            settings_menu()
        elif user_input == "3" or user_input.lower() == "web-checkvirus":
            clear_and_header()
            check_virus_in_url()
        elif user_input == "4" or user_input.lower() == "web-lookup":
            clear_and_header()
            web_lookup()
        elif user_input == "5" or user_input.lower() == "check-port":
            clear_and_header()
            port_scan()
        elif user_input == "6" or user_input.lower() == "encrypt-file":
            clear_and_header()
            encrypt_file()
        elif user_input == "7" or user_input.lower() == "check-my-info":
            clear_and_header()
            check_my_info()
        elif user_input == "8" or user_input.lower() == "decrypt-file":
            clear_and_header()
            decrypt_file()
            clear_and_header()
            check_my_info()
        elif user_input == "0" or user_input.lower() == "exit":
            clear_and_header()
            console.print("[bold red]Goodbye!")
            break
        else:
            clear_and_header()
            console.print("[bold red]Unknown command. Type '1' or 'help' to get started.")

# ... (semua import dan fungsi lainnya tetap)

def port_scan():
    console.print(Panel("[bold cyan]Enter a domain or IP to scan:[/bold cyan]", title="check-port", border_style="cyan"))
    target = Prompt.ask("[bold yellow]Target (domain/IP)")
    parsed = urlparse(target if "://" in target else f"http://{target}")
    host = parsed.hostname if parsed.hostname else target
    try:
        ip = socket.gethostbyname(host)
    except Exception as e:
        console.print(f"[bold red]Error resolving host:[/bold red] {e}")
        return

    start_port = int(Prompt.ask("[bold cyan]Start port", default="1"))
    end_port = int(Prompt.ask("[bold cyan]End port", default="1024"))
    timeout = 0.4

    open_ports = []
    filtered_ports = []
    closed_ports = []

    start_time = time.time()
    console.print(f"[bold cyan]Scanning {ip} ({host}) from port {start_port} to {end_port}...[/bold cyan]")

    try:
        for port in range(start_port, end_port + 1):
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(timeout)
                try:
                    result = sock.connect_ex((ip, port))
                    if result == 0:
                        try:
                            service = socket.getservbyport(port)
                        except:
                            service = "Unknown"
                        open_ports.append((port, service))
                        console.print(f"[bold green][OPEN][/bold green] Port {port} ({service})")
                    elif result == 111 or result == 10061:
                        closed_ports.append(port)
                        console.print(f"[red][CLOSED][/red] Port {port}")
                    else:
                        filtered_ports.append(port)
                        console.print(f"[yellow][FILTERED][/yellow] Port {port}")
                except socket.timeout:
                    filtered_ports.append(port)
                    console.print(f"[yellow][FILTERED][/yellow] Port {port}")
    except KeyboardInterrupt:
        console.print("\n[bold red]Scan dihentikan! Ctrl+C dinonaktifkan selama scan.[/bold red]")
        return

    end_time = time.time()
    duration = round(end_time - start_time, 2)

    # Ringkasan
    console.print("\n[bold blue]=== Scan Summary ===[/bold blue]")
    console.print(f"[green]Open ports   : {len(open_ports)}[/green]")
    console.print(f"[red]Closed ports : {len(closed_ports)}[/red]")
    console.print(f"[yellow]Filtered ports : {len(filtered_ports)}[/yellow]")
    console.print(f"[cyan]Scan time     : {duration} seconds[/cyan]")

    # Simpan ke file
    with open("scan_results.txt", "w") as f:
        f.write(f"Scan Result for {target} ({ip})\n")
        f.write(f"Scanned ports: {start_port}–{end_port}\n")
        f.write(f"Time: {duration}s\n\n")
        f.write("Open Ports:\n")
        for port, service in open_ports:
            f.write(f"  Port {port} ({service})\n")
        f.write("\nClosed Ports:\n")
        for port in closed_ports:
            f.write(f"  Port {port}\n")
        f.write("\nFiltered Ports:\n")
        for port in filtered_ports:
            f.write(f"  Port {port}\n")

    console.print("[bold green]Hasil disimpan ke 'scan_results.txt'[/bold green]")

#blokir penempatan script
def validate_script_location():
    import shutil

    termux_home = "/data/data/com.termux/files/home"
    termux_root = "/data/data/com.termux"
    current_dir = os.path.abspath(os.getcwd()).lower()

    # Lokasi yang diperbolehkan (pengguna biasa + operator/dev)
    valid_paths = [
        termux_root,
        os.path.join(termux_home, "Cwabs-"),
        "/storage/emulated/0/data/Cwabs project/v1.3.0",
    ]

    # Jika termasuk lokasi sah, lanjutkan eksekusi
    for path in valid_paths:
        if current_dir.startswith(os.path.abspath(path).lower()):
            return

    # Lokasi tidak sah → pindahkan file ke folder resmi
    target_dir = os.path.join(termux_home, "Cwabs-")
    os.makedirs(target_dir, exist_ok=True)

    script_path = os.path.abspath(__file__)
    script_name = "Cwabs.py"
    req_path = os.path.join(os.path.dirname(script_path), "requirements.txt")

    try:
        # Pindahkan file script
        shutil.copy2(script_path, os.path.join(target_dir, script_name))
        os.remove(script_path)

        # Pindahkan requirements.txt jika ada
        if os.path.isfile(req_path):
            shutil.copy2(req_path, os.path.join(target_dir, "requirements.txt"))
            os.remove(req_path)

        console.print(Panel(
            "[bold red]This script can only be executed inside the Termux environment.[/bold red]\n\n"
            "[green]The necessary files have been moved automatically.[/green]\n"
            "[yellow]Please re-run the tool from your Termux home directory.[/yellow]",
            title="[red]Execution Denied[/red]",
            border_style="red"
        ))
    except Exception as e:
        console.print(Panel(
            f"[bold red]Failed to move files:[/bold red] {e}",
            title="[red]Fatal Error[/red]",
            border_style="bright_red"
        ))

    sys.exit(1)

def main():
    validate_script_location()
    clear_screen()
    console.print(get_greeting(), justify="left")
    print()
    rainbow_figlet("Cwabs")
    print()
    show_prompt()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print("\n[bold red]Script interrupted by user.")
        sys.exit()

def detect_language(code):
    patterns = {
        "Python": ["def ", "import ", "print(", "self"],
        "C": ["#include", "int main", "printf(", "scanf("],
        "C++": ["#include", "std::", "cout", "cin"],
        "Java": ["public static void main", "System.out.println", "class "],
        "JavaScript": ["function(", "console.log", "var ", "let ", "=>"],
        "HTML": ["<html>", "<head>", "<body>"],
        "Bash": ["#!/bin/bash", "echo ", "fi", "if ["],
    }
    for lang, keywords in patterns.items():
        for keyword in keywords:
            if keyword in code:
                return lang
    return "Unknown"

def decrypt_file():
    from rich.panel import Panel
    from rich.text import Text
    from rich import box
    import base64
    import os

    console.print(Panel("[bold cyan]DECRYPT FILE[/bold cyan]\n\nEnter folder path and filename. This tool will try to detect encryption method and language.",
                        title="[bold red]Decryptor Engine v1[/bold red]", border_style="magenta", box=box.HEAVY))

    folder = Prompt.ask("[bold yellow]Enter folder path (e.g., storage/shared/data)")
    name = Prompt.ask("[bold yellow]Enter file name (e.g., start)")

    full_path = os.path.join(folder, name)

    if not os.path.isfile(full_path):
        console.print(f"[bold red]File not found: {full_path}[/bold red]")
        return

    try:
        with open(full_path, "rb") as f:
            content = f.read()

        layer = 0
        while True:
            try:
                decoded = base64.b64decode(content, validate=True)
                content = decoded
                layer += 1
            except:
                break

        if layer == 0:
            console.print("[bold red]No known encryption method detected.[/bold red]")
            return

        try:
            decoded_text = content.decode("utf-8", errors="ignore")
        except:
            decoded_text = str(content)

        lang = detect_language(decoded_text)
        output_file = os.path.join(os.getcwd(), f"{name}_decrypted.txt")
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(decoded_text)

        console.print(Panel(f"[green]Decryption successful![/green]\n[cyan]Detected layers:[/cyan] {layer}\n[cyan]Detected language:[/cyan] {lang}\n[white]Saved to:[/white] {output_file}",
                            title="[bold green]Success[/bold green]", border_style="green", box=box.ROUNDED))

    except Exception as e:
        console.print(f"[bold red]Failed to decrypt: {e}[/bold red]")
'''))