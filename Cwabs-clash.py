# Obfuscated version
import base64
exec(base64.b64decode("aW1wb3J0IHJlcXVlc3RzCmZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwCmZyb20gcmljaCBpbXBvcnQgcHJpbnQKZnJvbSByaWNoLmNvbnNvbGUgaW1wb3J0IENvbnNvbGUKZnJvbSByaWNoLnByb2dyZXNzIGltcG9ydCBQcm9ncmVzcwpmcm9tIHJpY2gudHJlZSBpbXBvcnQgVHJlZQpmcm9tIHJpY2gucGFuZWwgaW1wb3J0IFBhbmVsCmZyb20gcmljaC5zcGlubmVyIGltcG9ydCBTcGlubmVyCmZyb20gcmljaC50YWJsZSBpbXBvcnQgVGFibGUKaW1wb3J0IHNvY2tldAppbXBvcnQgc3NsCmltcG9ydCByZQppbXBvcnQgb3MKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKCmNvbnNvbGUgPSBDb25zb2xlKCkKCkhFQURFUlMgPSB7CiAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1vYmlsZSkgQ2hyb21lLzEyMiBTYWZhcmkvNTM3LjM2Igp9CgpDTVNfUEFUSFMgPSB7CiAgICAiV29yZFByZXNzIjogWyIvd3AtbG9naW4ucGhwIiwgIi93cC1hZG1pbi8iLCAiL3JlYWRtZS5odG1sIl0sCiAgICAiSm9vbWxhIjogWyIvYWRtaW5pc3RyYXRvci8iLCAiL2xhbmd1YWdlL2VuLUdCL2VuLUdCLnhtbCJdLAogICAgIkRydXBhbCI6IFsiL2NvcmUvaW5zdGFsbC5waHAiLCAiL3NpdGVzL2RlZmF1bHQvc2V0dGluZ3MucGhwIl0sCiAgICAiTGFyYXZlbCI6IFsiLy5lbnYiLCAiL3ZlbmRvci8iLCAiL3N0b3JhZ2UvbG9ncy9sYXJhdmVsLmxvZyJdLAogICAgIk1hZ2VudG8iOiBbIi9hZG1pbiIsICIvc2tpbi9mcm9udGVuZCIsICIvZG93bmxvYWRlci8iXQp9CgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oImNsZWFyIiBpZiBvcy5uYW1lID09ICJwb3NpeCIgZWxzZSAiY2xzIikKCmRlZiBncmVldGluZygpOgogICAgaG91ciA9IGRhdGV0aW1lLm5vdygpLmhvdXIKICAgIGlmIGhvdXIgPCAxMjoKICAgICAgICByZXR1cm4gIkdvb2QgbW9ybmluZyIKICAgIGVsaWYgaG91ciA8IDE3OgogICAgICAgIHJldHVybiAiR29vZCBhZnRlcm5vb24iCiAgICBlbHNlOgogICAgICAgIHJldHVybiAiR29vZCBldmVuaW5nIgoKZGVmIGdldF9pcCh1cmwpOgogICAgaG9zdG5hbWUgPSB1cmwuc3BsaXQoIi8vIilbLTFdLnNwbGl0KCIvIilbMF0KICAgIHRyeToKICAgICAgICByZXR1cm4gc29ja2V0LmdldGhvc3RieW5hbWUoaG9zdG5hbWUpCiAgICBleGNlcHQ6CiAgICAgICAgcmV0dXJuICJVbmtub3duIgoKZGVmIGdldF9zc2xfaW5mbyhkb21haW4pOgogICAgdHJ5OgogICAgICAgIGN0eCA9IHNzbC5jcmVhdGVfZGVmYXVsdF9jb250ZXh0KCkKICAgICAgICB3aXRoIGN0eC53cmFwX3NvY2tldChzb2NrZXQuc29ja2V0KCksIHNlcnZlcl9ob3N0bmFtZT1kb21haW4pIGFzIHM6CiAgICAgICAgICAgIHMuc2V0dGltZW91dCg1KQogICAgICAgICAgICBzLmNvbm5lY3QoKGRvbWFpbiwgNDQzKSkKICAgICAgICAgICAgY2VydCA9IHMuZ2V0cGVlcmNlcnQoKQogICAgICAgICAgICByZXR1cm4gY2VydFsnaXNzdWVyJ11bMF1bMF1bMV0KICAgIGV4Y2VwdDoKICAgICAgICByZXR1cm4gIlVuYXZhaWxhYmxlIgoKZGVmIGRldGVjdF9oZWFkZXJzKGhlYWRlcnMpOgogICAgZGF0YSA9IHt9CiAgICBmb3IgayBpbiBoZWFkZXJzOgogICAgICAgIGlmIGsubG93ZXIoKSBpbiBbInNlcnZlciIsICJ4LXBvd2VyZWQtYnkiLCAieC1kcnVwYWwtY2FjaGUiLCAieC1nZW5lcmF0b3IiXToKICAgICAgICAgICAgZGF0YVtrXSA9IGhlYWRlcnNba10KICAgIHJldHVybiBkYXRhCgpkZWYgZGV0ZWN0X2ZyYW1ld29yayhodG1sKToKICAgIGZyYW1ld29ya3MgPSBbXQogICAgaWYgIndwLWNvbnRlbnQiIGluIGh0bWw6IGZyYW1ld29ya3MuYXBwZW5kKCJXb3JkUHJlc3MiKQogICAgaWYgIkRydXBhbC5zZXR0aW5ncyIgaW4gaHRtbDogZnJhbWV3b3Jrcy5hcHBlbmQoIkRydXBhbCIpCiAgICBpZiAiY29tX2NvbnRlbnQiIGluIGh0bWw6IGZyYW1ld29ya3MuYXBwZW5kKCJKb29tbGEiKQogICAgaWYgInZ1ZSIgaW4gaHRtbDogZnJhbWV3b3Jrcy5hcHBlbmQoIlZ1ZS5qcyIpCiAgICBpZiAiUmVhY3QiIGluIGh0bWw6IGZyYW1ld29ya3MuYXBwZW5kKCJSZWFjdCIpCiAgICBpZiAiYW5ndWxhciIgaW4gaHRtbDogZnJhbWV3b3Jrcy5hcHBlbmQoIkFuZ3VsYXIiKQogICAgcmV0dXJuIGZyYW1ld29ya3MKCmRlZiBkZXRlY3RfY29tbW9uX2ZpbGVzKHVybCk6CiAgICBmb3VuZCA9IFtdCiAgICBmb3IgY21zLCBwYXRocyBpbiBDTVNfUEFUSFMuaXRlbXMoKToKICAgICAgICBmb3IgcGF0aCBpbiBwYXRoczoKICAgICAgICAgICAgZnVsbF91cmwgPSB1cmwucnN0cmlwKCIvIikgKyBwYXRoCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJlcyA9IHJlcXVlc3RzLmdldChmdWxsX3VybCwgaGVhZGVycz1IRUFERVJTLCB0aW1lb3V0PTUpCiAgICAgICAgICAgICAgICBpZiByZXMuc3RhdHVzX2NvZGUgaW4gWzIwMCwgNDAzXSBhbmQgbGVuKHJlcy50ZXh0KSA+IDUwOgogICAgICAgICAgICAgICAgICAgIGZvdW5kLmFwcGVuZChjbXMpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgY29udGludWUKICAgIHJldHVybiBsaXN0KHNldChmb3VuZCkpCgpkZWYgd2FmX2NoZWNrKGhlYWRlcnMpOgogICAgaWYgImNmLXJheSIgaW4gaGVhZGVycyBvciAiY2xvdWRmbGFyZSIgaW4gaGVhZGVycy5nZXQoIlNlcnZlciIsICIiKS5sb3dlcigpOgogICAgICAgIHJldHVybiAiQ2xvdWRmbGFyZSBXQUYiCiAgICBpZiAic3VjdXJpIiBpbiBoZWFkZXJzLmdldCgiU2VydmVyIiwgIiIpLmxvd2VyKCk6CiAgICAgICAgcmV0dXJuICJTdWN1cmkgV0FGIgogICAgcmV0dXJuICJOb3QgZGV0ZWN0ZWQiCgpkZWYgZ2V0X3dlYnNpdGVfdGl0bGUoaHRtbCk6CiAgICBzb3VwID0gQmVhdXRpZnVsU291cChodG1sLCAiaHRtbC5wYXJzZXIiKQogICAgdGl0bGVfdGFnID0gc291cC5maW5kKCJ0aXRsZSIpCiAgICByZXR1cm4gdGl0bGVfdGFnLnRleHQuc3RyaXAoKSBpZiB0aXRsZV90YWcgZWxzZSAiTm8gVGl0bGUgRm91bmQiCgpkZWYgc3RhcnRfc2Nhbih1cmwpOgogICAgaWYgbm90IHVybC5zdGFydHN3aXRoKCJodHRwIik6CiAgICAgICAgdXJsID0gImh0dHA6Ly8iICsgdXJsCgogICAgaG9zdG5hbWUgPSB1cmwuc3BsaXQoIi8vIilbLTFdLnNwbGl0KCIvIilbMF0KICAgIHRyZWUgPSBUcmVlKGYiW2JvbGQgZ3JlZW5dU2NhbiBSZXN1bHRzIGZvciBbdW5kZXJsaW5lXXt1cmx9Wy9dIikKCiAgICB0cnk6CiAgICAgICAgd2l0aCBjb25zb2xlLnN0YXR1cygiW2JvbGQgY3lhbl1TY2FubmluZyB3ZWJzaXRlLCBwbGVhc2Ugd2FpdC4uLiIsIHNwaW5uZXI9ImRvdHMiKToKICAgICAgICAgICAgcmVzID0gcmVxdWVzdHMuZ2V0KHVybCwgaGVhZGVycz1IRUFERVJTLCB0aW1lb3V0PTEwKQogICAgICAgICAgICBodG1sID0gcmVzLnRleHQKICAgICAgICAgICAgaGVhZGVycyA9IHJlcy5oZWFkZXJzCgogICAgICAgICAgICB0aXRsZSA9IGdldF93ZWJzaXRlX3RpdGxlKGh0bWwpCiAgICAgICAgICAgIGlwID0gZ2V0X2lwKHVybCkKICAgICAgICAgICAgc3NsX2lzc3VlciA9IGdldF9zc2xfaW5mbyhob3N0bmFtZSkKCiAgICAgICAgICAgIHRyZWUuYWRkKGYiW2JvbGQgYmx1ZV1XZWJzaXRlIFRpdGxlOlsvXSB7dGl0bGV9IikKICAgICAgICAgICAgdHJlZS5hZGQoZiJbY3lhbl1JUCBBZGRyZXNzOlsvXSB7aXB9IikKICAgICAgICAgICAgdHJlZS5hZGQoZiJbY3lhbl1TU0wgSXNzdWVyOlsvXSB7c3NsX2lzc3Vlcn0iKQoKICAgICAgICAgICAgaGVhZGVyc19kYXRhID0gZGV0ZWN0X2hlYWRlcnMoaGVhZGVycykKICAgICAgICAgICAgaGVhZGVyX25vZGUgPSB0cmVlLmFkZCgiW21hZ2VudGFdSGVhZGVyIEluZm9ybWF0aW9uWy9dIikKICAgICAgICAgICAgZm9yIGssIHYgaW4gaGVhZGVyc19kYXRhLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBoZWFkZXJfbm9kZS5hZGQoZiJbd2hpdGVde2t9OlsvXSB7dn0iKQoKICAgICAgICAgICAgZnJhbWV3b3JrX25vZGUgPSB0cmVlLmFkZCgiW3llbGxvd11GcmFtZXdvcmtzIC8gQ01TWy9dIikKICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZGV0ZWN0X2ZyYW1ld29yayhodG1sKSArIGRldGVjdF9jb21tb25fZmlsZXModXJsKToKICAgICAgICAgICAgICAgIGZyYW1ld29ya19ub2RlLmFkZChmIlt3aGl0ZV0tIHtpdGVtfSIpCgogICAgICAgICAgICBqc19ub2RlID0gdHJlZS5hZGQoIltibHVlXUphdmFTY3JpcHQgJiBUZWNobm9sb2dpZXNbL10iKQogICAgICAgICAgICBpZiAianF1ZXJ5IiBpbiBodG1sLmxvd2VyKCk6IGpzX25vZGUuYWRkKCJqUXVlcnkiKQogICAgICAgICAgICBpZiAiZ29vZ2xlLWFuYWx5dGljcyIgaW4gaHRtbC5sb3dlcigpOiBqc19ub2RlLmFkZCgiR29vZ2xlIEFuYWx5dGljcyIpCiAgICAgICAgICAgIGlmICJndGFnIiBpbiBodG1sOiBqc19ub2RlLmFkZCgiR29vZ2xlIFRhZyBNYW5hZ2VyIikKCiAgICAgICAgICAgIHdhZiA9IHdhZl9jaGVjayhoZWFkZXJzKQogICAgICAgICAgICB0cmVlLmFkZChmIltyZWRdV0FGIERldGVjdGlvbjpbL10ge3dhZn0iKQoKICAgICAgICAgICAgY29va2llX25vZGUgPSB0cmVlLmFkZCgiW3B1cnBsZV1Db29raWVzIEZvdW5kWy9dIikKICAgICAgICAgICAgZm9yIGNvb2tpZSBpbiByZXMuY29va2llczoKICAgICAgICAgICAgICAgIGNvb2tpZV9ub2RlLmFkZChmIntjb29raWUubmFtZX0gPSB7Y29va2llLnZhbHVlfSIpCgogICAgICAgIGNvbnNvbGUucHJpbnQoUGFuZWwodHJlZSwgdGl0bGU9Iltib2xkIGN5YW5dV2Vic2l0ZSBTY2FuIFJlcG9ydCIsIGJvcmRlcl9zdHlsZT0iYnJpZ2h0X21hZ2VudGEiKSkKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgY29uc29sZS5wcmludChmIltib2xkIHJlZF1GYWlsZWQgdG8gYWNjZXNzIHdlYnNpdGU6Wy9dIHtlfSIpCgojID09PSBNQUlOID09PQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgY2xlYXJfc2NyZWVuKCkKICAgIGdyZWV0aW5nX21zZyA9IGdyZWV0aW5nKCkKICAgIGNvbnNvbGUucHJpbnQoUGFuZWwoZiJbYm9sZCBncmVlbl17Z3JlZXRpbmdfbXNnfSEgV2VsY29tZSB0byB0aGUgVWx0aW1hdGUgV2Vic2l0ZSBTY2FubmVyWy9dIiwgc3R5bGU9ImJvbGQgY3lhbiIpKQogICAgdXJsID0gY29uc29sZS5pbnB1dCgiW2JvbGQgeWVsbG93XUVudGVyIHRhcmdldCBVUkwgKGUuZy4sIGh0dHBzOi8vZXhhbXBsZS5jb20pOlsvXSAiKS5zdHJpcCgpCiAgICBzdGFydF9zY2FuKHVybCkKICAgIGNvbnNvbGUucHJpbnQoIlxuW2JvbGQgZ3JlZW5dU2NhbiBjb21wbGV0ZS4gSGF2ZSBhIG5pY2UgZGF5IVsvYm9sZCBncmVlbl0iKQo=").decode('utf-8'))
